/* Auto-generated by genmsg_cpp for file /home/robo/DD2425_2013/fuerte_workspace/robotics_g7/robot/msg/EKF.msg */
#ifndef ROBOT_MESSAGE_EKF_H
#define ROBOT_MESSAGE_EKF_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace robot
{
template <class ContainerAllocator>
struct EKF_ {
  typedef EKF_<ContainerAllocator> Type;

  EKF_()
  : x(0.0)
  , y(0.0)
  , theta(0.0)
  , y_wall(0.0)
  {
  }

  EKF_(const ContainerAllocator& _alloc)
  : x(0.0)
  , y(0.0)
  , theta(0.0)
  , y_wall(0.0)
  {
  }

  typedef float _x_type;
  float x;

  typedef float _y_type;
  float y;

  typedef float _theta_type;
  float theta;

  typedef float _y_wall_type;
  float y_wall;


  typedef boost::shared_ptr< ::robot::EKF_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot::EKF_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct EKF
typedef  ::robot::EKF_<std::allocator<void> > EKF;

typedef boost::shared_ptr< ::robot::EKF> EKFPtr;
typedef boost::shared_ptr< ::robot::EKF const> EKFConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::robot::EKF_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::robot::EKF_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace robot

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::robot::EKF_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::robot::EKF_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::robot::EKF_<ContainerAllocator> > {
  static const char* value() 
  {
    return "5d9ce42a66b2094acde32a1b566e7ecd";
  }

  static const char* value(const  ::robot::EKF_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x5d9ce42a66b2094aULL;
  static const uint64_t static_value2 = 0xcde32a1b566e7ecdULL;
};

template<class ContainerAllocator>
struct DataType< ::robot::EKF_<ContainerAllocator> > {
  static const char* value() 
  {
    return "robot/EKF";
  }

  static const char* value(const  ::robot::EKF_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::robot::EKF_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 x\n\
float32 y\n\
float32 theta\n\
float32 y_wall\n\
\n\
";
  }

  static const char* value(const  ::robot::EKF_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::robot::EKF_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::robot::EKF_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.x);
    stream.next(m.y);
    stream.next(m.theta);
    stream.next(m.y_wall);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct EKF_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot::EKF_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::robot::EKF_<ContainerAllocator> & v) 
  {
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "theta: ";
    Printer<float>::stream(s, indent + "  ", v.theta);
    s << indent << "y_wall: ";
    Printer<float>::stream(s, indent + "  ", v.y_wall);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ROBOT_MESSAGE_EKF_H

