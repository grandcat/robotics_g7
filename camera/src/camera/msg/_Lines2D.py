"""autogenerated by genpy from camera/Lines2D.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import camera.msg

class Lines2D(genpy.Message):
  _md5sum = "f402e3a4c1723d3fbb8f7105142104da"
  _type = "camera/Lines2D"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """Line2D[] lines
bool isPathFree
int32[] indices_left
int32[] indices_right
int32[] indices_horizontal
int32[] indices_vertical
int32[] indices_obstacle 
int32[] indices_uninteresting
================================================================================
MSG: camera/Line2D
int32 x0
int32 y0
int32 x1
int32 y1
float32 angle
string description
"""
  __slots__ = ['lines','isPathFree','indices_left','indices_right','indices_horizontal','indices_vertical','indices_obstacle','indices_uninteresting']
  _slot_types = ['camera/Line2D[]','bool','int32[]','int32[]','int32[]','int32[]','int32[]','int32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       lines,isPathFree,indices_left,indices_right,indices_horizontal,indices_vertical,indices_obstacle,indices_uninteresting

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Lines2D, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.lines is None:
        self.lines = []
      if self.isPathFree is None:
        self.isPathFree = False
      if self.indices_left is None:
        self.indices_left = []
      if self.indices_right is None:
        self.indices_right = []
      if self.indices_horizontal is None:
        self.indices_horizontal = []
      if self.indices_vertical is None:
        self.indices_vertical = []
      if self.indices_obstacle is None:
        self.indices_obstacle = []
      if self.indices_uninteresting is None:
        self.indices_uninteresting = []
    else:
      self.lines = []
      self.isPathFree = False
      self.indices_left = []
      self.indices_right = []
      self.indices_horizontal = []
      self.indices_vertical = []
      self.indices_obstacle = []
      self.indices_uninteresting = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.lines)
      buff.write(_struct_I.pack(length))
      for val1 in self.lines:
        _x = val1
        buff.write(_struct_4if.pack(_x.x0, _x.y0, _x.x1, _x.y1, _x.angle))
        _x = val1.description
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.isPathFree))
      length = len(self.indices_left)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.indices_left))
      length = len(self.indices_right)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.indices_right))
      length = len(self.indices_horizontal)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.indices_horizontal))
      length = len(self.indices_vertical)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.indices_vertical))
      length = len(self.indices_obstacle)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.indices_obstacle))
      length = len(self.indices_uninteresting)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.indices_uninteresting))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.lines is None:
        self.lines = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lines = []
      for i in range(0, length):
        val1 = camera.msg.Line2D()
        _x = val1
        start = end
        end += 20
        (_x.x0, _x.y0, _x.x1, _x.y1, _x.angle,) = _struct_4if.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.description = str[start:end].decode('utf-8')
        else:
          val1.description = str[start:end]
        self.lines.append(val1)
      start = end
      end += 1
      (self.isPathFree,) = _struct_B.unpack(str[start:end])
      self.isPathFree = bool(self.isPathFree)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.indices_left = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.indices_right = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.indices_horizontal = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.indices_vertical = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.indices_obstacle = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.indices_uninteresting = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.lines)
      buff.write(_struct_I.pack(length))
      for val1 in self.lines:
        _x = val1
        buff.write(_struct_4if.pack(_x.x0, _x.y0, _x.x1, _x.y1, _x.angle))
        _x = val1.description
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.isPathFree))
      length = len(self.indices_left)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.indices_left.tostring())
      length = len(self.indices_right)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.indices_right.tostring())
      length = len(self.indices_horizontal)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.indices_horizontal.tostring())
      length = len(self.indices_vertical)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.indices_vertical.tostring())
      length = len(self.indices_obstacle)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.indices_obstacle.tostring())
      length = len(self.indices_uninteresting)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.indices_uninteresting.tostring())
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.lines is None:
        self.lines = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lines = []
      for i in range(0, length):
        val1 = camera.msg.Line2D()
        _x = val1
        start = end
        end += 20
        (_x.x0, _x.y0, _x.x1, _x.y1, _x.angle,) = _struct_4if.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.description = str[start:end].decode('utf-8')
        else:
          val1.description = str[start:end]
        self.lines.append(val1)
      start = end
      end += 1
      (self.isPathFree,) = _struct_B.unpack(str[start:end])
      self.isPathFree = bool(self.isPathFree)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.indices_left = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.indices_right = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.indices_horizontal = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.indices_vertical = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.indices_obstacle = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.indices_uninteresting = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4if = struct.Struct("<4if")
_struct_B = struct.Struct("<B")
